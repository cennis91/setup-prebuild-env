name: Release GitHub Action
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  workflow_dispatch:
    inputs:
      channel:
        description: Type of release to create
        required: false
        default: prerelease
        type: choice
        options:
          - draft
          - prerelease
          - release
          - latest
      version:
        description: Existing semver version tag to release
        required: true
        type: string

env:
  BOT_USER_EMAIL: ${{ vars.BOT_USER_EMAIL || '41898282+github-actions[bot]@users.noreply.github.com' }}
  BOT_USER_NAME: ${{ vars.BOT_USER_NAME || 'github-actions[bot]' }}
  CHANNEL: ${{ inputs.channel || vars.RELEASE_CHANNEL || 'latest' }}
  TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
  VERSION: ${{ inputs.version || github.ref_name }}

jobs:
  github-release:
    name: Release GitHub Action
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: ${{ github.event_name == 'workflow_dispatch' }}

      - name: Configure Bot User
        env:
          BOT_USER_EMAIL: ${{ env.BOT_USER_EMAIL }}
          BOT_USER_NAME: ${{ env.BOT_USER_NAME }}
        run: |
          printf "::group::%s\n" "Configure Bot User"
          git config user.name "$BOT_USER_NAME"
          git config user.email "$BOT_USER_EMAIL"
          printf "::endgroup::\n"

      - name: Validate Version Format
        id: semver
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          printf "::group::%s\n" "Validate Version Format"
          trim() {
              _trim=${1#"${1%%[![:space:]]*}"}
              _trim=${_trim%"${_trim##*[![:space:]]}"}
              printf '%s\n' "$_trim"
          }

          VERSION=$(trim "$VERSION")
          if ! echo "$VERSION" | grep -qE '^v[0-9]+\.[0-9]+\.[0-9]+$'; then
              printf "Invalid semver version format: %s\n" "$VERSION" 1>&2
              exit 1
          fi

          SEMVER="$(trim "${VERSION#v}")"
          IFS="." read -r major minor patch <<-END
              $SEMVER
          END

          {
              printf 'MAJOR_TAG=%s\n' "v$(trim "$major")"
              printf 'MINOR_TAG=%s\n' "v$(trim "$major").$(trim "$minor")"
              printf 'RELEASE_TAG=%s\n' "v$(trim "$major").$(trim "$minor").$(trim "$patch")"
          } | tee -a "$GITHUB_OUTPUT"
          printf "::endgroup::\n"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: ${{ env.CHANNEL == 'draft' }}
          prerelease: ${{ env.CHANNEL == 'prerelease' }}
          name: Release ${{ steps.semver.outputs.RELEASE_TAG }}
          tag_name: ${{ steps.semver.outputs.RELEASE_TAG }}
          token: ${{ env.TOKEN }}
          make_latest: ${{ env.CHANNEL == 'latest' }}

      - name: Update Latest Release Tags
        if: ${{ env.CHANNEL == 'latest' }}
        env:
          MAJOR_TAG: ${{ steps.semver.outputs.MAJOR_TAG }}
          MINOR_TAG: ${{ steps.semver.outputs.MINOR_TAG }}
          RELEASE_TAG: ${{ steps.semver.outputs.RELEASE_TAG }}
        run: |
          printf "::group::%s\n" "Update latest release tags"
          git tag -f -a "$MINOR_TAG" -m "Release $RELEASE_TAG" "${RELEASE_TAG}^{}"
          git push -f origin "$MINOR_TAG"

          git tag -f -a "$MAJOR_TAG" -m "Release $RELEASE_TAG" "${RELEASE_TAG}^{}"
          git push -f origin "$MAJOR_TAG"
          printf "::endgroup::\n"
